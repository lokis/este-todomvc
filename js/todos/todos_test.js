// Generated by github.com/steida/coffee2closure 0.1.3
suite('app.todos.Todos', function() {
  var Todos, createTodo, todos;
  Todos = app.todos.Todos;
  todos = null;
  setup(function() {
    return todos = new Todos;
  });
  createTodo = function(props) {
    var todo;
    todo = new app.todos.Todo;
    goog.mixin(todo, props);
    return todo;
  };
  suite('constructor', function() {
    return test('should set items to empty array', function() {
      return assert.deepEqual(todos.items, []);
    });
  });
  suite('add', function() {
    return test('should add new Todo', function() {
      todos.add('Foo');
      assert.lengthOf(todos.items, 1);
      return assert.instanceOf(todos.items[0], app.todos.Todo);
    });
  });
  suite('remaining', function() {
    return test('should return uncompleted todos', function() {
      var completedTodo, uncompletedTodo;
      completedTodo = createTodo({
        completed: true
      });
      uncompletedTodo = createTodo({
        completed: false
      });
      todos.items.push(completedTodo);
      todos.items.push(uncompletedTodo);
      assert.equal(todos.remaining().length, 1);
      return assert.deepEqual(todos.remaining()[0], uncompletedTodo);
    });
  });
  suite('completed', function() {
    return test('should return completed todos', function() {
      var completedTodo, uncompletedTodo;
      completedTodo = createTodo({
        completed: true
      });
      uncompletedTodo = createTodo({
        completed: false
      });
      todos.items.push(completedTodo);
      todos.items.push(uncompletedTodo);
      assert.equal(todos.completed().length, 1);
      return assert.deepEqual(todos.completed()[0], completedTodo);
    });
  });
  suite('setAllCompleted', function() {
    return test('should set completed for all todos', function() {
      var completedTodo;
      completedTodo = createTodo({
        completed: true
      });
      todos.items.push(completedTodo);
      todos.setAllCompleted(true);
      assert.isTrue(todos.items[0].completed);
      todos.setAllCompleted(false);
      return assert.isFalse(todos.items[0].completed);
    });
  });
  suite('clearCompleted', function() {
    return test('should remove completed', function() {
      todos.items.push(createTodo({
        completed: true
      }));
      todos.items.push(createTodo({
        completed: false
      }));
      todos.clearCompleted();
      assert.equal(todos.items.length, 1);
      return assert.isFalse(todos.items[0].completed);
    });
  });
  suite('deserialize', function() {
    return test('should deserialize todos', function() {
      todos.items.push(createTodo({
        title: 'Bar'
      }));
      todos.deserialize({
        items: [
          {
            id: 123,
            title: 'Foo'
          }
        ]
      });
      assert.equal(todos.items.length, 1);
      assert.instanceOf(todos.items[0], app.todos.Todo);
      assert.equal(todos.items[0].id, 123);
      return assert.equal(todos.items[0].title, 'Foo');
    });
  });
  return suite('serialize', function() {
    return test('should serialize todos without editing state', function() {
      var object, todo;
      todo = createTodo({
        id: 123,
        title: 'Bar',
        editing: true
      });
      todos.items.push(todo);
      object = todos.serialize();
      assert.equal(object.items.length, 1);
      assert.instanceOf(object.items[0], app.todos.Todo);
      assert.equal(object.items[0].id, 123);
      assert.equal(object.items[0].title, 'Bar');
      return assert.isFalse(object.items[0].editing);
    });
  });
});